#if !DISABLESTEAMWORKS && HE_STEAMCOMPLETE
using Steamworks;
using System;

namespace HeathenEngineering.SteamworksIntegration
{
    /// <summary>
    /// Represents a ticekt such as is generated by a user and sent to start an authentication session.
    /// </summary>
    [Serializable]
    public class AuthenticationTicket
    {
        /// <summary>
        /// Indicates that this session is being managed by a client or server
        /// </summary>
        public bool isClientTicket = true;
        /// <summary>
        /// The authentication handle assoceated with this ticket
        /// </summary>
        public HAuthTicket handle;
        /// <summary>
        /// The ticket data of this ticket ... this is what should be sent to servers for processing
        /// </summary>
        public byte[] data;
        /// <summary>
        /// Has this ticket been verified, this gets set to true when the Get Authentication Session responce comes back from the Steamworks backend.
        /// </summary>
        public bool verified;
        /// <summary>
        /// The Steamworks date time this ticket was created
        /// </summary>
        public uint createdOn;

        public EResult result;
        public Action<AuthenticationTicket, bool> callback;

        /// <summary>
        /// The age of this ticket from the current server realtime
        /// </summary>
        public TimeSpan Age
        {
            get { return new TimeSpan(0, 0, (int)(SteamUtils.GetServerRealTime() - createdOn)); }
        }

        /// <summary>
        /// Cancels the ticekt
        /// </summary>
        public void Cancel()
        {
            if (isClientTicket)
                SteamUser.CancelAuthTicket(handle);
            else
                SteamGameServer.CancelAuthTicket(handle);
        }
    }

}
#endif